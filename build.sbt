import play.core.PlayVersion
import play.sbt.PlayImport._
import play.sbt.routes.RoutesKeys
import sbt.Tests.{Group, SubProcess}
import scoverage.ScoverageKeys
import uk.gov.hmrc.DefaultBuildSettings.{defaultSettings, scalaSettings}
import uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin
import uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin.publishingSettings


val appName = "claim-tax-refund-frontend"

lazy val appDependencies: Seq[ModuleID] = compile ++ test()
lazy val plugins: Seq[Plugins] = Seq.empty
lazy val playSettings: Seq[Setting[_]] = Seq.empty

val bootstrapVersion = "7.15.0"

val compile = Seq(
  ws,
  "uk.gov.hmrc"           %% "bootstrap-frontend-play-28"     % bootstrapVersion,
  "uk.gov.hmrc"           %% "play-frontend-hmrc"             % "7.3.0-play-28",
  "uk.gov.hmrc.mongo"     %% "hmrc-mongo-play-28"             % "1.1.0",
  "uk.gov.hmrc"           %% "http-caching-client"            % "10.0.0-play-28",
  "uk.gov.hmrc"           %% "play-conditional-form-mapping"  % "1.13.0-play-28",
  "uk.gov.hmrc"           %% "play-partials"                  % "8.4.0-play-28",
  "uk.gov.hmrc"           %% "play-language"                  % "6.2.0-play-28",
  "uk.gov.hmrc"           %% "tax-year"                       % "3.1.0",
  "org.scalatra.scalate"  %% "play-scalate"                   % "0.6.0",
  "org.scalatra.scalate"  %% "scalate-core"                   % "1.9.8",
  "uk.gov.hmrc"           %% "domain"                         % "8.2.0-play-28",
  "com.googlecode.libphonenumber" % "libphonenumber"          % "8.13.9"
)

def test(scope: String = "test"): Seq[ModuleID] = Seq(
  "uk.gov.hmrc"             %%  "bootstrap-test-play-28"    % bootstrapVersion % scope,
  "com.github.tomakehurst"  %   "wiremock-standalone"       % "2.27.2" % scope,
  "com.vladsch.flexmark"    %   "flexmark-all"              % "0.35.10" % scope,
  "org.scalatestplus"       %%  "scalatestplus-mockito"     % "1.0.0-M2" % scope,
  "org.scalatestplus.play"  %%  "scalatestplus-play"        % "5.1.0" % scope,
  "org.scalatestplus"       %%  "scalatestplus-scalacheck"  % "3.1.0.0-RC2" % scope,
  "uk.gov.hmrc.mongo"       %%  "hmrc-mongo-test-play-28"    % "1.1.0" % scope,
  "org.pegdown"             %   "pegdown"                   % "1.6.0" % scope,
  "org.jsoup"               %   "jsoup"                     % "1.15.4" % scope,
  "com.typesafe.play"       %%  "play-test"                 % PlayVersion.current % scope,
  "org.mockito"             %   "mockito-all"               % "1.10.19" % scope
)

def oneForkedJvmPerTest(tests: Seq[TestDefinition]): Seq[Group] =
  tests.map { test =>
    Group(test.name, Seq(test), SubProcess(ForkOptions().withRunJVMOptions(Vector(s"-Dtest.name=${test.name}"))))
  }

lazy val microservice = Project(appName, file("."))
  .enablePlugins(Seq(play.sbt.PlayScala, PlayNettyServer, SbtDistributablesPlugin) ++ plugins: _*)
  .disablePlugins(JUnitXmlReportPlugin) // Required to prevent https://github.com/scalatest/scalatest/issues/1427
  .settings(playSettings: _*)
  .settings(RoutesKeys.routesImport ++= Seq("models._"))
  .settings(
    ScoverageKeys.coverageExcludedFiles := "<empty>;Reverse.*;.*filters.*;.*handlers.*;.*components.*;.*repositories.*;" +
      ".*BuildInfo.*;.*javascript.*;.*FrontendAuditConnector.*;.*Routes.*;.*GuiceInjector;.*DataCacheConnector;" +
      ".*ControllerConfiguration;.*LanguageSwitchController",
    ScoverageKeys.coverageMinimumStmtTotal := 80,
    ScoverageKeys.coverageFailOnMinimum := true,
    ScoverageKeys.coverageHighlighting := true,
    parallelExecution in Test := false
  )
  .settings(scalaSettings: _*)
  .settings(publishingSettings: _*)
  .settings(isPublicArtefact := true)
  .settings(defaultSettings(): _*)
  .settings(
    scalacOptions ++= Seq("-feature"),
    libraryDependencies ++= appDependencies,
    retrieveManaged := true,
    evictionWarningOptions in update := EvictionWarningOptions.default.withWarnScalaVersionEviction(false),
    PlayKeys.devSettings += "play.server.http.port" -> "9969"
  )
  .settings(
    Keys.fork in Test := true
  )
  .settings(resolvers ++= Seq(
    Resolver.jcenterRepo,
  ))
  .settings(
    // concatenate js
    Concat.groups := Seq(
      "javascripts/claimtaxrefundfrontend-app.js" -> group(Seq("javascripts/show-hide-content.js", "javascripts/claimtaxrefundfrontend.js"))
    ),
    // prevent removal of unused code which generates warning errors due to use of third-party libs
    uglifyCompressOptions := Seq("unused=false", "dead_code=false"),
    pipelineStages := Seq(digest),
    // below line required to force asset pipeline to operate in dev rather than only prod
    pipelineStages in Assets := Seq(concat, uglify),
    // only compress files generated by concat
    includeFilter in uglify := GlobFilter("claimtaxrefundfrontend-*.js")
  )
  .settings(majorVersion := 0)
  .settings(scalaVersion := "2.13.8")
  .settings(
    TwirlKeys.templateImports ++= Seq(
      "uk.gov.hmrc.govukfrontend.views.html.components._",
      "uk.gov.hmrc.hmrcfrontend.views.html.components._",
      "uk.gov.hmrc.hmrcfrontend.views.html.helpers._",
      "uk.gov.hmrc.govukfrontend.views.html.components.implicits._"
    )
  )
// ***************
// Use the silencer plugin to suppress warnings from unused imports in compiled twirl templates
scalacOptions += "-P:silencer:pathFilters=routes"
scalacOptions += "-P:silencer:lineContentFilters=^\\w"
libraryDependencies ++= Seq(
  compilerPlugin("com.github.ghik" % "silencer-plugin" % "1.7.12" cross CrossVersion.full),
  "com.github.ghik" % "silencer-lib" % "1.7.12" % Provided cross CrossVersion.full
)
// ***************


